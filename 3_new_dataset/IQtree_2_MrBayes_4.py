# get information from best_scheme.nex file generated by IQtree modelfinder and write MrBayes block
# this script is inspired by https://github.com/brettc/partitionfinder/blob/42010508ea382c6450b114c32827ace8727a9d9d/partfinder/model_utils.py#L79 script for converting into MrBayes for partitionfinder
import os, argparse

os.chdir("/home/kris/dypsidinae/C_large_dataset/8.MrBayes_n/")

#taking the genes argument from the gwf workflow
parser = argparse.ArgumentParser()
parser.add_argument("genes")
args = parser.parse_args()
genes = str(args.genes)


IQtree_result=open("/home/kris/dypsidinae/C_large_dataset/6.IQtree/"+genes+".iqtree").readlines()

#Finding the nucleotide model
for lines in IQtree_result:
    if "Best-fit model according to BIC: " in lines:
        line_with_models=lines
model=line_with_models[33:]
if "GTR" in model or "SYM" in model:
    nucleotide_model ="\t lset nst=6 "
elif "HKY" in model or "HKY85" in model or "K80" in model or "K2P" in model:
    nucleotide_model= "\t lset nst=2 "
elif "F81" in model or "JC69" in model or "JC" in model:
    nucleotide_model= "\t lset  nst=1 "
else:
    nucleotide_model= "not recognized"

#setting base frequencies to equal if the model is SYM, JC, JC69, K80, K2P or if IQtree has set base frequencies to equal (FQ)
if "SYM" in model or "JC" in model or "JC69" in model or "K80" in model or "K2P" in model or "+FQ" in model:
    base_freq= "\t prset statefreqpr= fixed(equal); \n"
else:
    base_freq=""

#rate varation
#If IQtree gives I, defining invariable sites as rate variation in MrBayes
if "+I" in model and "+G" not in model:
    rate_variation= " rates=propinv ; \n"
#If IQtree gives G, defining gamma distribution in MrBayes
elif "+G" in model and "+I" not in model:
    start = "+G"
    index_s = model.partition(start)
    ngammacat=str(index_s[2]) # defining the number of discrete categories used to approximate the gamma distribution
    rate_variation= " rates=gamma ngammacat="+ngammacat[0]+"; \n"
#If IQtree gives G+I, setting gamma and invariable site in MrBayes
elif "+I" in model and "+G" in model:
    start = "+G"
    index_s = model.partition(start)
    ngammacat=str(index_s[2]) # defining the number of discrete categories used to approximate the gamma distribution
    rate_variation= " rates=invgamma ngammacat="+ngammacat[0]+"; \n"
else:
    rate_variation= "; \n"  #assuming that all characters evolve at the same rate

#commands needed for MrBayes
begin= "begin mrbayes;\n\n"
autoclose= "\t set autoclose=yes; [makes automatic execution]\n"
make_log= "\t log start filename="+genes+"_4.log replace;\n"
file_to_execute= "\t Execute /home/kris/dypsidinae/C_large_dataset/7.Nex_files_n/"+genes+"_no_X-out.nex;\n"
block= [begin,autoclose, str(make_log), str(file_to_execute)]
#adding the model to the MrBayes block
block.append(str(nucleotide_model)+str(rate_variation))
block.append(str(base_freq))

block.append("\t mcmc ngen=7500000 samplefreq=2500 printfreq=2500 diagnfreq=2500 append=yes;\n ")
block.append("\t sump;\n")
block.append("END;")

#Write MrBayes block
MrBayes_block = open(genes+"_MrBayes_block_4.nex", 'w')
for i in block:
      MrBayes_block.write(i)

